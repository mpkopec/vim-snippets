snippet alw@* "always @*" b
always @* begin
	${1:${VISUAL}}
end
endsnippet

snippet alw@( "always @()" b
always @(${1:sensitivity list}) begin
	${2:${VISUAL}}
end
endsnippet

snippet ei "Else-if statement" b
else if (${1:condition}) begin
	${2:${VISUAL}}
end
endsnippet

snippet el "Else statement" b
else begin
	${1:${VISUAL}}
end
endsnippet

snippet if "If statement" b
if (${1:condition}) begin
	${2:${VISUAL}}
end
endsnippet

snippet ife "If-else statement" b
if (${1:condition}) begin
	${2:${VISUAL}}
end
else begin
	${3:${VISUAL}}
end
endsnippet

snippet ifee "If-else if-else statement" b
if (${1:condition}) begin
	${2:${VISUAL}}
end
else if (${3:condition}) begin
	${4:${VISUAL}}
end
else begin
	${5:${VISUAL}}
end
endsnippet

snippet in "Input" b
input ${1:input_name}
endsnippet

snippet inv "Input vector" b
input [${1:n}:${2:m}] ${3:input_name}
endsnippet

snippet inrv "Input register vector" b
input reg [${1:n}:${2:m}] ${3:input_name}
endsnippet

snippet func "Function definition" b
function ${1:func_name}(); 
	begin
		${2:${VISUAL}}
	end
endfunction
endsnippet

snippet funcio "Function definition with IO" b
function ${1:func_name}(
	${2:${VISUAL:inputs definitions}}
); 
	begin
		${3:${VISUAL}}
	end
endfunction
endsnippet

snippet mod "Module definition" b
module ${1:module_name}();
	${2:${VISUAL}}
endmodule
endsnippet

snippet modio "Module definition with IO" b
module ${1:module_name}(
	${2:${VISUAL:ports definitions}}
);
	${3:${VISUAL}}
endmodule
endsnippet

snippet modpio "Module definition with parameters and IO" b
module ${1:module_name} #(
	${2:${VISUAL:parameters definitions}}
)(
	${3:${VISUAL:ports definitions}}
);
	${4:${VISUAL}}
endmodule
endsnippet

snippet par "Paramter" b
parameter ${1:parameter_name} = ${2:parameter_value}
endsnippet

snippet task "Task definition" b
task ${1:task_name}(); 
	begin
		${2:${VISUAL}}
	end
endtask
endsnippet

snippet taskp "Task definition with ports" b
task ${1:task_name}(
	${2:${VISUAL:ports definitions}}
); 
	begin
		${3:${VISUAL}}
	end
endtask
endsnippet

snippet out "Output" b
output ${1:output_name}
endsnippet

snippet outv "Output vector" b
output [${1:n}:${2:m}] ${3:output_name}
endsnippet

snippet outrv "Output register vector" b
output reg [${1:n}:${2:m}] ${3:output_name}
endsnippet

snippet v "Vector/array range" b
[${1:n}:${2:m}]
endsnippet
